// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package investv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InvestServiceClient is the client API for InvestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvestServiceClient interface {
	GetPortfolio(ctx context.Context, in *PortfolioRequest, opts ...grpc.CallOption) (*PortfolioResponse, error)
	GetAccounts(ctx context.Context, in *AccountsRequest, opts ...grpc.CallOption) (*AccountsResponse, error)
}

type investServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInvestServiceClient(cc grpc.ClientConnInterface) InvestServiceClient {
	return &investServiceClient{cc}
}

func (c *investServiceClient) GetPortfolio(ctx context.Context, in *PortfolioRequest, opts ...grpc.CallOption) (*PortfolioResponse, error) {
	out := new(PortfolioResponse)
	err := c.cc.Invoke(ctx, "/invest.v1.InvestService/GetPortfolio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *investServiceClient) GetAccounts(ctx context.Context, in *AccountsRequest, opts ...grpc.CallOption) (*AccountsResponse, error) {
	out := new(AccountsResponse)
	err := c.cc.Invoke(ctx, "/invest.v1.InvestService/GetAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvestServiceServer is the server API for InvestService service.
// All implementations must embed UnimplementedInvestServiceServer
// for forward compatibility
type InvestServiceServer interface {
	GetPortfolio(context.Context, *PortfolioRequest) (*PortfolioResponse, error)
	GetAccounts(context.Context, *AccountsRequest) (*AccountsResponse, error)
	mustEmbedUnimplementedInvestServiceServer()
}

// UnimplementedInvestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInvestServiceServer struct {
}

func (UnimplementedInvestServiceServer) GetPortfolio(context.Context, *PortfolioRequest) (*PortfolioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortfolio not implemented")
}
func (UnimplementedInvestServiceServer) GetAccounts(context.Context, *AccountsRequest) (*AccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccounts not implemented")
}
func (UnimplementedInvestServiceServer) mustEmbedUnimplementedInvestServiceServer() {}

// UnsafeInvestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvestServiceServer will
// result in compilation errors.
type UnsafeInvestServiceServer interface {
	mustEmbedUnimplementedInvestServiceServer()
}

func RegisterInvestServiceServer(s grpc.ServiceRegistrar, srv InvestServiceServer) {
	s.RegisterService(&InvestService_ServiceDesc, srv)
}

func _InvestService_GetPortfolio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestServiceServer).GetPortfolio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invest.v1.InvestService/GetPortfolio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestServiceServer).GetPortfolio(ctx, req.(*PortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvestService_GetAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestServiceServer).GetAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invest.v1.InvestService/GetAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestServiceServer).GetAccounts(ctx, req.(*AccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InvestService_ServiceDesc is the grpc.ServiceDesc for InvestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InvestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "invest.v1.InvestService",
	HandlerType: (*InvestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPortfolio",
			Handler:    _InvestService_GetPortfolio_Handler,
		},
		{
			MethodName: "GetAccounts",
			Handler:    _InvestService_GetAccounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "invest/v1/invest.proto",
}
