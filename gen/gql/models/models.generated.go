// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlmodels

import (
	"fmt"
	"io"
	"strconv"
)

type Account struct {
	AccountID   *string      `json:"accountId"`
	AccountType *AccountType `json:"accountType"`
}

type AccountInput struct {
	AccountID   *string      `json:"accountId"`
	AccountType *AccountType `json:"accountType"`
}

type AccountsResponse struct {
	Accounts []*Account `json:"accounts"`
}

type PortfolioRequestInput struct {
	Account *AccountInput `json:"account"`
}

type PortfolioResponse struct {
	Positions []*Position `json:"positions"`
}

type Position struct {
	Figi                      *string  `json:"figi"`
	Ticker                    *string  `json:"ticker"`
	Isin                      *string  `json:"isin"`
	InstrumentType            *string  `json:"instrumentType"`
	Balance                   *float64 `json:"balance"`
	Blocked                   *float64 `json:"blocked"`
	ExpectedYield             *Yield   `json:"expectedYield"`
	Lots                      *int     `json:"lots"`
	AveragePositionPrice      *Yield   `json:"averagePositionPrice"`
	AveragePositionPriceNoNkd *Yield   `json:"averagePositionPriceNoNkd"`
	Name                      *string  `json:"name"`
}

type Yield struct {
	Currency *string  `json:"currency"`
	Value    *float64 `json:"value"`
}

type AccountType string

const (
	AccountTypeTypeUnspecified AccountType = "TYPE_UNSPECIFIED"
	AccountTypeTypeBroker      AccountType = "TYPE_BROKER"
	AccountTypeTypeIis         AccountType = "TYPE_IIS"
)

var AllAccountType = []AccountType{
	AccountTypeTypeUnspecified,
	AccountTypeTypeBroker,
	AccountTypeTypeIis,
}

func (e AccountType) IsValid() bool {
	switch e {
	case AccountTypeTypeUnspecified, AccountTypeTypeBroker, AccountTypeTypeIis:
		return true
	}
	return false
}

func (e AccountType) String() string {
	return string(e)
}

func (e *AccountType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AccountType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AccountType", str)
	}
	return nil
}

func (e AccountType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
